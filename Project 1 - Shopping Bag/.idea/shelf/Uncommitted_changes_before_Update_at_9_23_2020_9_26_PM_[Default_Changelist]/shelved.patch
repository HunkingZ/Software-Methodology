Index: src/ShoppingBag.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.Arrays;\r\n\r\n/**\r\n * ShoppingBag Class\r\n *\r\n * @author Hanqing Zhao, Richard Xu\r\n */\r\npublic class ShoppingBag {\r\n    private GroceryItem[] bag; // List of items\r\n    private int size = 0; // Current number of items in the bag\r\n    private int capacity = 5; // Maximum available number of items in the bag\r\n\r\n    /**\r\n     * Constructor for declaring a Shopping Bag\r\n     */\r\n    public ShoppingBag() {\r\n        bag = new GroceryItem[capacity];\r\n    }\r\n\r\n    /**\r\n     * Find the index of a certain item in the Shopping Bag\r\n     *\r\n     * @param item The item you want to find\r\n     * @return Index of the target item\r\n     */\r\n    private int find(GroceryItem item) {\r\n        for (int indexOfItem = 0; indexOfItem < size; indexOfItem++) {\r\n            if (bag[indexOfItem].equals(item)) {\r\n                return indexOfItem;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    /**\r\n     * Prints every current item in the Shopping Bag\r\n     */\r\n    public void print() {\r\n        for (int i = 0; i < size; i++) {\r\n            GroceryItem item = bag[i];\r\n            System.out.println(\"â€¢ \" + item);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Increases the maximum capacity of the Shopping Bag by 5\r\n     */\r\n    private void grow() {\r\n        capacity += 5;\r\n        bag = Arrays.copyOf(bag, capacity);\r\n    }\r\n\r\n    /**\r\n     * Adds an item into the Shopping Bag\r\n     *\r\n     * @param item The item you want to add\r\n     */\r\n    public void add(GroceryItem item) {\r\n        if (size >= capacity) {\r\n            grow();\r\n        }\r\n        bag[size] = item;\r\n        size++;\r\n    }\r\n\r\n    /**\r\n     * Returns the number of items in the Shopping Bag\r\n     *\r\n     * @return Size of the Shopping Bag\r\n     */\r\n    public int getSize() {\r\n        return size;\r\n    }\r\n\r\n    /**\r\n     * Removes a specific item from the Shopping Bag\r\n     *\r\n     * @param itemToRemove The item to be removed\r\n     */\r\n    public void remove(GroceryItem itemToRemove) {\r\n        if (find(itemToRemove) != -1) {\r\n            int indexOfItem = find(itemToRemove);\r\n            int lastItemInBag = indexOfItem + 1;\r\n\r\n            // Replace target item with the last item in the bag\r\n            while (lastItemInBag < size) {\r\n                bag[indexOfItem] = bag[lastItemInBag];\r\n                indexOfItem++;\r\n                lastItemInBag++;\r\n            }\r\n\r\n            bag[lastItemInBag] = null;\r\n            size--;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculates the total price of all the items in the Shopping Bag\r\n     *\r\n     * @return Calculated total\r\n     */\r\n    public double salesPrice() {\r\n        double total_sales = 0;\r\n\r\n        for (int i = 0; i < size; i++) {\r\n            total_sales += bag[i].price;\r\n        }\r\n\r\n        return total_sales;\r\n    }\r\n\r\n    /**\r\n     * Calculates the total tax of all taxable items in the purchase\r\n     *\r\n     * @return Calculated total tax\r\n     */\r\n    public double salesTax() {\r\n        double tax_rate = 0.06625;\r\n        double total_tax = 0;\r\n\r\n        for (int i = 0; i < size; i++) {\r\n            if (bag[i].taxable) {\r\n                total_tax += bag[i].price * tax_rate;\r\n            }\r\n        }\r\n\r\n        return total_tax;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/ShoppingBag.java	(revision 91bf853c4f7d10a3bfbf35b0edf211d9de9afd73)
+++ src/ShoppingBag.java	(date 1600807388816)
@@ -101,7 +101,6 @@
      */
     public double salesPrice() {
         double total_sales = 0;
-
         for (int i = 0; i < size; i++) {
             total_sales += bag[i].price;
         }
